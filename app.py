# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KA3YpeBe_fXbig0vvcIiay_VruzWl_cY
"""

import streamlit as st
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
import pickle
import os

# Ensure models directory exists
os.makedirs('models', exist_ok=True)

# Page configuration
st.set_page_config(
    page_title="Pakistan Development Prediction",
    page_icon="ðŸ‡µðŸ‡°",
    layout="wide"
)

@st.cache_resource
def load_artifacts():
    """Load the model and preprocessing objects"""
    try:
        model = load_model('models/model.h5')
        with open('models/scaler.pkl', 'rb') as f:
            scaler = pickle.load(f)
        with open('models/label_encoder.pkl', 'rb') as f:
            label_encoder = pickle.load(f)
        return model, scaler, label_encoder
    except Exception as e:
        st.error(f"Error loading model artifacts: {str(e)}")
        return None, None, None

def make_prediction(model, scaler, label_encoder, input_data):
    """Make prediction using the loaded model"""
    try:
        scaled_data = scaler.transform(input_data.reshape(1, -1))
        prediction = model.predict(scaled_data)
        development_level = label_encoder.inverse_transform([round(prediction[0][0])])[0]
        return development_level
    except Exception as e:
        st.error(f"Error making prediction: {str(e)}")
        return None

def main():
    # Main title
    st.title("ðŸ‡µðŸ‡° Pakistan Development Prediction")
    st.markdown("### Predict Pakistan's development level based on various factors")

    # Load model artifacts
    model, scaler, label_encoder = load_artifacts()

    if not all([model, scaler, label_encoder]):
        st.error("Please ensure model files are in the 'models' directory")
        return

    # Create input form
    with st.form("prediction_form"):
        # Input sliders
        factors = {
            "Education": st.slider("Investment in Education", 0, 100, 50),
            "Healthcare": st.slider("Healthcare Improvements", 0, 100, 50),
            "Economy": st.slider("Economic Diversification", 0, 100, 50),
            "Infrastructure": st.slider("Infrastructure Development", 0, 100, 50),
            "Technology": st.slider("Technology and Innovation", 0, 100, 50),
            "Social": st.slider("Social Cohesion", 0, 100, 50),
            "Environment": st.slider("Environmental Sustainability", 0, 100, 50),
            "Governance": st.slider("Good Governance", 0, 100, 50)
        }

        # Submit button
        submitted = st.form_submit_button("Predict Development Level")

    if submitted:
        input_data = np.array(list(factors.values()))
        development_level = make_prediction(model, scaler, label_encoder, input_data)

        if development_level:
            st.success(f"### Predicted Development Level: {development_level}")

            # Show factor visualization
            st.markdown("### Factor Values Overview")
            factor_df = pd.DataFrame({
                'Factor': list(factors.keys()),
                'Value': list(factors.values())
            })
            st.bar_chart(factor_df.set_index('Factor'))

    # Sidebar information
    with st.sidebar:
        st.title("Development Strategies")
        st.markdown("""
        ### Key Areas:
        1. Education: Quality education at all levels
        2. Healthcare: Affordable and accessible healthcare
        3. Economy: Business growth and exports
        4. Infrastructure: Transportation and energy
        5. Technology: Digital advancement
        6. Social: Community engagement
        7. Environment: Climate action
        8. Governance: Transparency
        """)

if __name__ == "__main__":
    main()